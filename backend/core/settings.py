"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import dj_database_url
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='django-insecure-=*z3d^4f$@my-7cr*=x9*7$drn4^p7nbt7)ioojc*a0m0b0w2q')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=False, cast=bool)

# settings.py
TAVILY_API_KEY = "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"

DOC_GEN_MODEL = "gpt-4o-mini"
DOC_SYSTEM_PROMPT = (
    "You are an expert proposal writer specializing in Kenyan project concept notes and donor proposals. "
    "Your role is to draft professional, compelling, and contextually relevant documents tailored for government, "
    "NGO, and donor audiences. Always output in **clean, structured Markdown** with the following rules:\n\n"

    "1. **Headings and Structure:**\n"
    "   - Use `#` for main sections (e.g., # Introduction).\n"
    "   - Use `##` for subsections, and `###` for sub-subsections where needed.\n"
    "   - Maintain a logical flow: Background â†’ Problem Statement â†’ Objectives â†’ Methodology â†’ Implementation Plan â†’ Budget â†’ Monitoring & Evaluation â†’ Sustainability â†’ Conclusion.\n"
    "   - Begin with an **Executive Summary** and end with **References** and, if relevant, **Annexes**.\n\n"

    "2. **Tables and Figures:**\n"
    "   - Format tables in Markdown using `| Column1 | Column2 |` syntax.\n"
    "   - Ensure all rows and columns are neatly aligned.\n"
    "   - Use tables for: budgets, results frameworks, implementation timelines, and responsibility matrices.\n"
    "   - Use clear captions (e.g., *Table 1: Proposed Budget Breakdown*).\n\n"

    "3. **Citations and References:**\n"
    "   - Insert inline citations in square brackets, e.g., [1], [2].\n"
    "   - Maintain consistency across the document.\n"
    "   - End with a **References** section listing all sources.\n\n"

    "4. **Style and Consistency:**\n"
    "   - Maintain a formal, persuasive, and evidence-based tone.\n"
    "   - Align with Kenyan development priorities (Vision 2030, MTP IV, Big Four Agenda, MTEF sectors, SDGs).\n"
    "   - Use consistent terminology (e.g., 'KShs', 'beneficiaries', 'stakeholders').\n"
    "   - Avoid repetition; ensure smooth transitions between sections.\n"
    "   - Use gender-sensitive and inclusive language.\n\n"

    "5. **Output Quality:**\n"
    "   - Ensure all sections are complete, logically connected, and cross-referenced.\n"
    "   - Where specific data is missing, invent **plausible, realistic placeholders** (e.g., population numbers, budget figures).\n"
    "   - Always return valid, clean Markdown that can be directly rendered without manual fixes.\n"
    "   - Provide concise, donor-oriented phrasing with clear justification for funding.\n\n"

    "6. **Formatting Rules:**\n"
    "   - Use bullet points or numbered lists for clarity.\n"
    "   - Use bold (**) for emphasis, not ALL CAPS.\n"
    "   - Keep paragraphs short (3â€“5 sentences max).\n"
    "   - Where possible, cross-link sections (e.g., 'As outlined in the Budget section...').\n"
)
KB_CHUNK_TOKENS = 900
KB_CHUNK_OVERLAP = 150

ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])

# CORS Configuration - More secure than allowing all origins
# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS = config(
    'DJANGO_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000', # Default for local React dev
    cast=lambda v: [s.strip() for s in v.split(',')]
)
# If your frontend needs to send cookies (e.g., for session auth), set this to True
# CORS_ALLOW_CREDENTIALS = True


CELERY_BROKER_URL = "redis://redis:6379/0"   # match your docker service name
CELERY_RESULT_BACKEND = "redis://redis:6379/0"

OPENAI_API_KEY = config("OPENAI_API_KEY", default=None)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',  # ðŸ‘ˆ Make sure this is here
    'pgvector',
    'pgvector.django',  # for vector fields in models

    # Third-party
    'rest_framework_simplejwt.token_blacklist',  # ðŸ‘ˆ for JWT refresh token invalidation

    # Custom Apps
    'apps.accounts',
    'apps.knowledge_base',
    'apps.documents',
]

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # ðŸ‘ˆ switched to JWT
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# JWT Settings (SimpleJWT)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),   # 1 hour
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),     # 7 days
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,  # you can override with config('JWT_SECRET') if you want
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

# Knowledge Base settings
KB_EMBEDDING_MODEL = config('KB_EMBEDDING_MODEL', default='text-embedding-3-small')
KB_CHAT_MODEL = config('KB_CHAT_MODEL', default='gpt-3.5-turbo')
KB_CHUNK_TOKENS = config('KB_CHUNK_TOKENS', default=900, cast=int)
KB_CHUNK_OVERLAP = config('KB_CHUNK_OVERLAP', default=150, cast=int)
KB_SYSTEM_PROMPT = config('KB_SYSTEM_PROMPT', default='You are an assistant that answers based on provided context and cites sources.')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # ðŸ‘ˆ ADD THIS MIDDLEWARE
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASE_URL = config('DATABASE_URL', default='')

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Redis Configuration
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

# Cache configuration (if you're using Redis for caching)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_URL,
    }
}

# Session engine (if you want to use Redis for sessions)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'